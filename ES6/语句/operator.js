/****************************************
		!!
		**********************/
// 判断字符串不为空，快速获取布尔值
!"hello"
false
!!"hello"
true

----------------------
// 判断对象不为空，快速获取布尔值
!{user: "nimei"}
false
!!{user: "nimei"}
true

---------------------
// 判断数组不为空，快速获取布尔值
!![1, 2]
true

-------------------
.get('/session/loginState', ctx => {
            ctx.body = { isLogin: !!ctx.session.userInfo };
        })

/*****************************************
**********按位与 运算符（&）*****************
******************************************/
/*
4.04&0
0
4.04|0
4
*/
// 参加运算的两个数据，按二进制位进行“与”运算。
/*
运算规则：0&0=0;  0&1=0;   1&0=0;    1&1=1;

      即：两位同时为“1”，结果才为“1”，否则为0

例如：3&5  即 0000 0011& 0000 0101 = 00000001  因此，3&5的值得1。

 

另，负数按补码形式参加按位与运算。

“与运算”的特殊用途：

（1）清零。如果想将一个单元清零，即使其全部二进制位为0，只要与一个各位都为零的数值相与，结果为零。

 

（2）取一个数中指定位

方法：找一个数，对应X要取的位，该数的对应位为1，其余位为零，此数与X进行“与运算”可以得到X中的指定位。

例：设X=10101110，

   取X的低4位，用 X & 0000 1111 = 00001110 即可得到；

   还可用来取X的2、4、6位。
*/


/*****************************************
**********按位或 运算符（|）*****************
******************************************/
/*参加运算的两个对象，按二进制位进行“或”运算。

运算规则：0|0=0；  0|1=1；  1|0=1；   1|1=1；

     即 ：参加运算的两个对象只要有一个为1，其值为1。

例如:3|5　即 00000011 | 0000 0101 = 00000111  因此，3|5的值得7。　

 

另，负数按补码形式参加按位或运算。

“或运算”特殊作用：

（1）常用来对一个数据的某些位置1。

方法：找到一个数，对应X要置1的位，该数的对应位为1，其余位为零。此数与X相或可使X中的某些位置1。

例：将X=10100000的低4位置1 ，用X | 0000 1111 = 1010 1111即可得到。
*/


/*****************************************
**********异或运算符（^）*****************
******************************************/
/*
参加运算的两个数据，按二进制位进行“异或”运算。

运算规则：0^0=0；  0^1=1；  1^0=1；   1^1=0；
1^2
3
1^1
0

   即：参加运算的两个对象，如果两个相应位为“异”（值不同），则该位结果为1，否则为0。

 

“异或运算”的特殊作用：

（1）使特定位翻转找一个数，对应X要翻转的各位，该数的对应位为1，其余位为零，此数与X对应位异或即可。

例：X=10101110，使X低4位翻转，用X ^0000 1111 = 1010 0001即可得到。

 

（2）与0相异或，保留原值 ，X ^ 00000000 = 1010 1110。

下面重点说一下按位异或,异或其实就是不进位加法,如1+1=0，,0+0=0,1+0=1。
*/


/*****************************************
**********按位取反运算符(~)*****************
*******************

    按位取反运算是单目运算，用来求一个位串信息按位的反，即哪些为0的位，结果是1，而哪些为1的位，结果是0。例如, ~7的结果为0xfff8。

    取反运算常用来生成与系统实现无关的常数。如要将变量x最低6位置成0，其余位不变，可用代码x = x & ~077实现。以上代码与整数x用2个字节还是用4个字节实现无关。

    当两个长度不同的数据进行位运算时(例如long型数据与int型数据)，将两个运算分量的右端对齐进行位运算。如果短的数为正数，高位用0补满；如果短的数为负数，高位用1补满。如果短的为无符号整数，则高位总是用0补满。

    位运算用来对位串信息进行运算，得到位串信息结果。如以下代码能取下整型变量k的位串信息的最右边为1的信息位：((k-1)^k) & k。
***********************/


/*****************************************
**********逻辑运算符（&&   ||）*****************
*******************

|| && 表示逻辑运算,||表示或者的意思，&& 表示并且的意思，例如  33>44 || "abcd"=="abcd",其结果是逻辑值true或false

***********************/
















