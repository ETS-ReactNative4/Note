/*
作用域（scope），程序设计概念，通常来说，一段程序代码中所用到的名字并不总是有效/可用的，
而限定这个名字的可用性的代码范围就是这个名字的作用域。
作用域的使用提高了程序逻辑的局部性，增强程序的可靠性，减少名字冲突。
*/

// 当变量出现在赋值操作的左侧时进行 LHS 查询，出现在右侧时进行 RHS 查询。
// 考虑以下代码:
console.log( a );
// 其中对 a 的引用是一个 RHS 引用，因为这里 a 并没有赋予任何值。相应地，需要查找并取
// 得 a 的值，这样才能将值传递给 console.log(..)。

// 相比之下，例如:
a = 2;
// 这里对 a 的引用则是 LHS 引用，因为实际上我们并不关心当前的值是什么，只是想要为 =
// 2 这个赋值操作找到一个目标。

// 不成功的 RHS 引用会导致抛出 ReferenceError 异常


// 当一个块或函数嵌套在另一个块或函数中时，就发生了作用域的嵌套。因此，在当前作用 域中无法找到某个变量时，引擎就会在外层嵌套的作用域中继续查找，直到找到该变量， 或抵达最外层的作用域(也就是全局作用域)为止。
// 考虑以下代码:
function foo(a) { console.log( a + b );
}
var b = 2; 
foo( 2 ); // 4
// 对 b 进行的 RHS 引用无法在函数 foo 内部完成，但可以在上一级作用域(在这个例子中就 是全局作用域)中完成。